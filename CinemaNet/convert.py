# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/utils_03_pytorch_to_coreml.ipynb (unless otherwise specified).

__all__ = ['torch_to_onnx', 'onnx_to_coreml', 'args', 'add_scaler', 'save_coreml_model', 'torch_to_coreml']

# Cell

from onnx_coreml import convert
from onnx import onnx_pb

from fastai.vision import *
from .train_utils import *
from .custom_head import *

# Cell
def torch_to_onnx(model:nn.Module,
                  save_path   :str   = '../exported-models/',
                  model_fname :str   = 'onnx-model',
                  input_shape :tuple = (3, 224, 224)):
    'Export torch.nn model as ONNX model'
    model.eval();
    x = torch.randn(1, *input_shape)
    torch.onnx._export(model, x.cuda(),
                       f'{os.path.join(save_path, model_fname)}.onnx',
                       export_params=True)


# Cell
import copy
import coremltools
import os

# after building torch from source (1.5.0dev{something})
# the below imports were sometimes crashing the kernel
# experimentally, it appears that importing them first
# works fine.

# from onnx_coreml import convert
# from onnx import onnx_pb

# Cell
args = dict(is_bgr=False,
            red_bias   = -(0.485 * 255.0),
            green_bias = -(0.456 * 255.0),
            blue_bias  = -(0.406 * 255.0))

def onnx_to_coreml(model_path:str = '../exported-models/',
                   model_name:str = '',
                   num_labels:int = 6,
                   mode:str = 'classifier',
                   preprocessing_args:dict = args,
                   target_ios:str = '13'):
    'Convert ONNX to CoreML w/out scaling layer'
    return convert(
        #model=path_to_model, mode=mode, image_input_names=['Input-Image'],
        model=f'{os.path.join(model_path, model_name)}.onnx',
        mode=mode,
        image_input_names=['input.1'],
        class_labels=[i for i in range(num_labels)], preprocessing_args=args,
        target_ios=target_ios
    )

# Cell
def add_scaler(model:coremltools.models.model.MLModel,
               author:str  = 'Rahul Somani / Synopsis',
               license:str = 'BSD',
               description:str = None) -> coremltools.proto.Model_pb2.Model:
    'Add scaling layer to model converted from ONNX using `onnx_coreml.convert`, and some metadata'
    spec    = model.get_spec()
    nn_spec = spec.neuralNetworkClassifier
    layers  = nn_spec.layers                 # list of all layers
    layers_copy = copy.deepcopy(layers)
    del nn_spec.layers[:]

    scale_layer = nn_spec.layers.add()
    scale_layer.name = 'scaler'
    scale_layer.input.append('input.1')
    scale_layer.output.append('input.1_scaled')

    params = scale_layer.scale
    scale_R = 1.0 / (0.229 * 255.0)
    scale_G = 1.0 / (0.224 * 255.0)
    scale_B = 1.0 / (0.225 * 255.0)
    params.scale.floatValue.extend([scale_R, scale_G, scale_B])
    params.shapeScale.extend([3,1,1])

    nn_spec.layers.extend(layers_copy) # add back the layers
    nn_spec.layers[1].input[0] = 'input.1_scaled'

    spec.description.metadata.author  = author
    spec.description.metadata.license = license

    if not description:
        from datetime import datetime
        time_right_now = datetime.now().strftime('%Y-%m-%d at %H:%M:%S')
        spec.description.metadata.shortDescription = f'''This model was exported to CoreML on {time_right_now}
        Visit https://github.com/Synopsis/CinemaNet/tree/vision_models for more details
        '''
    else:
        spec.description.metadata.shortDescription = description

    return spec

# Cell
def save_coreml_model(model:coremltools.proto.Model_pb2.Model,
                      save_path:str  = '../models/',
                      model_name:str = 'coreml-model'):
    'Save model w/ scaling layer created using `add_scale`'
    coreml_model      = coremltools.models.MLModel(model)
    coreml_model_path = f'{os.path.join(save_path, model_name)}.mlmodel'
    coreml_model.save(coreml_model_path)

# Cell
def torch_to_coreml(model:nn.Module,
                    num_labels:int     = 6,
                    save_path:str      = '../exported-models/',
                    model_fname:str    = 'best-model',
                    mode:str           = 'classifier',
                    input_shape:tuple  = (3,224,224),
                    author:str         = 'Rahul Somani / Synopsis',
                    license:str        = 'BSD', #
                    description:str    = None):
    'Export torch.nn model to CoreML model'
    torch_to_onnx(model, save_path=save_path, model_fname=model_fname,
                  input_shape=input_shape) # exports to disk
    print('Converted PyTorch to ONNX')
    print('Converting ONNX to CoreML\n')
    mod_coreml_raw    = onnx_to_coreml(save_path, model_fname, num_labels, mode, target_ios='13')
    mod_coreml_scaler = add_scaler(mod_coreml_raw, author, license, description)
    save_coreml_model(mod_coreml_scaler, save_path, model_fname)
    print(f'Saved model to {os.path.join(save_path, model_fname)}.mlmodel')